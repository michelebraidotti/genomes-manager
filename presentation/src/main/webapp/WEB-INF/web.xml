<?xml version="1.0"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<description>MyProject web.xml</description>

	<display-name>Genomes Manager</display-name>

	<!-- Add Support for Spring -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>
			org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<context-param>
		<description>Project stage for the application (new in 2.0). Expects one of
      the following values: Development, Production, SystemTest, UnitTest
    </description>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	<!-- Use client-side state saving. In Trinidad, it is an optimized, token-based 
		mechanism that is almost always a better choice than the standard JSF server-side 
		state saving. -->
	<context-param>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
		<!--param-value>server</param-value -->
	</context-param>
	<context-param>
		<description>Defines which packages to scan for beans, separated by commas.
    Useful for when using maven and jetty:run (version 6) or tomcat:run
    </description>
		<param-name>org.apache.myfaces.annotation.SCAN_PACKAGES</param-name>
		<param-value>org.genomesmanager.presentation</param-value>
	</context-param>


	<!-- Trinidad by default uses an optimized client-side state saving mechanism. 
		To disable that, uncomment the following -->
	<!--context-param> <param-name>org.apache.myfaces.trinidad.CLIENT_STATE_METHOD</param-name> 
		<param-value>all</param-value> </context-param -->

	<!-- Trinidad also supports an optimized strategy for caching some view 
		state at an application level, which significantly improves scalability. 
		However, it makes it harder to develop (updates to pages will not be noticed 
		until the server is restarted), and in some rare cases cannot be used for 
		some pages (see Trinidad documentation for more information) -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.USE_APPLICATION_VIEW_CACHE</param-name>
		<param-value>false</param-value>
	</context-param>

	<!-- If this parameter is enabled, Trinidad will automatically check the 
		modification date of your JSPs, and discard saved state when they change; 
		this makes development easier, but adds overhead that should be avoided when 
		your application is deployed -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Enables Change Persistence at a session scope. By default, Change Persistence 
		is entirely disabled. The ChangeManager is an API, which can persist component 
		modifications (like, is a showDetail or tree expanded or collapsed). For 
		providing a custom Change Persistence implementation inherit from the Trinidad 
		API's ChangeManager class. As the value you have to use the fullqualified 
		class name. -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CHANGE_PERSISTENCE</param-name>
		<param-value>session</param-value>
	</context-param>

	<filter>
		<filter-name>trinidad</filter-name>
		<filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>trinidad</filter-name>
		<servlet-name>faces</servlet-name>
	</filter-mapping>

	<!-- Faces Servlet -->
	<servlet>
		<servlet-name>faces</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
	</servlet>

	<!-- resource loader servlet -->
	<servlet>
		<servlet-name>resources</servlet-name>
		<servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Faces Servlet Mappings -->
	<servlet-mapping>
		<servlet-name>faces</servlet-name>
		<url-pattern>*.jsf</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>resources</servlet-name>
		<url-pattern>/adf/*</url-pattern>
	</servlet-mapping>

	<!-- Welcome Files -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>


	<context-param>
		<!-- Maximum memory per request (in bytes) -->
		<param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_MEMORY</param-name>
		<!-- Use 512M -->
		<param-value>512000000</param-value>
	</context-param>
	<context-param>
		<!-- Maximum disk space per request (in bytes) -->
		<param-name>org.apache.myfaces.trinidad.UPLOAD_MAX_DISK_SPACE</param-name>
		<!-- Use 5Gb -->
		<param-value>5000000000</param-value>
	</context-param>
	<context-param>
		<!-- directory to store temporary files -->
		<param-name>org.apache.myfaces.trinidad.UPLOAD_TEMP_DIR</param-name>
		<!-- Use a TrinidadUploads subdirectory of /tmp -->
		<param-value>/tmp/TrinidadUploads/</param-value>
	</context-param>
</web-app>
