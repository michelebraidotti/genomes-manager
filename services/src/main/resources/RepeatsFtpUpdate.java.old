package org.genomesmanager.services.impl.repeats;

import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.ejb.ActivationConfigProperty;
import javax.ejb.EJB;
import javax.ejb.MessageDriven;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.ObjectMessage;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.log4j.Logger;

import edu.arizona.genome.configuration.ConfigurationLocal;
import edu.arizona.genome.genomesdb.Chromosome;
import edu.arizona.genome.genomesdb.Repeat;
import edu.arizona.genome.genomesdb.RepeatsOrder;
import edu.arizona.genome.genomesdb.SequenceSliceException;
import edu.arizona.genome.genomesdb.Species;
import edu.arizona.genome.species.SpeciesListLocal;

/**
 * Message-Driven Bean implementation class for: RepeatsFtpUpdate
 *
 */
@MessageDriven(
	name="RepeatsFtpUpdater",
	activationConfig = { 
			@ActivationConfigProperty(propertyName ="destinationType", propertyValue = "javax.jms.Queue"),
			@ActivationConfigProperty(propertyName="acknowledgeMode", propertyValue="AUTO_ACKNOWLEDGE"),
			@ActivationConfigProperty(propertyName="destination", propertyValue="/queue/RepeatsFtpUpdate")
	}
)
public class RepeatsFtpUpdate implements MessageListener {
	static protected final Logger log = Logger.getLogger(RepeatsFtpUpdate.class.getName());
	@EJB
	private SpeciesListLocal spList;
	@EJB
	private RepeatsListsLocal repeatsList;
	@EJB
	private ConfigurationLocal cfg;
	
    public RepeatsFtpUpdate() { }
	
    public void onMessage(Message message) {
    	ObjectMessage objectMessage = (ObjectMessage)message;
    	String  whenDoneEmailTo = "";
	    try {
			whenDoneEmailTo = (String)objectMessage.getObject();
		} 
	    catch (JMSException e1) {
			log.error("JMSException " + e1.getMessage());
		}
    	String ftpShareDir = cfg.getValue("repeats", "ftp.share");
    	if ( ftpShareDir != null && ! ftpShareDir.equals("")) {
    		File ftpDir = new File(ftpShareDir);
    		if ( ftpDir.exists() && ftpDir.canRead()) {
    			System.out.println(ftpDir.getAbsolutePath());
    			try {
    				wipeDir(ftpDir);
					exportAll(ftpDir);
					exportAllByClassification(ftpDir);
					sendEmail(whenDoneEmailTo);
				} 
    			catch (IOException e) {
    				log.error("IOException " + e.getMessage());
				} catch (SequenceSliceException e) {
					log.error("SequenceSliceException " + e.getMessage());
				} catch (MessagingException e) {
					log.error("MessagingException " + e.getMessage());
				}
    		}
    		else {
    			log.error("Repeats ftp share dir " + ftpShareDir + " not found or not writable");
    		}
    	}
    	else {
    		log.error("Property repeats.ftp.share empty");
    	}

    }

	private void sendEmail(String whenDoneEmailTo) throws MessagingException {
		Properties mailerProps = new Properties();
		mailerProps.put("mail.transport.protocol", cfg.getValue("mailer", "mail.transport.protocol"));
		mailerProps.put("mail.smtp.host", cfg.getValue("mailer", "mail.smtp.host"));
		Session session = Session.getDefaultInstance(mailerProps, null);
	    MimeMessage message = new MimeMessage(session);
	    message.setFrom(new InternetAddress(cfg.getValue("mailer", "sender.default")));
	    message.setRecipients(MimeMessage.RecipientType.TO, whenDoneEmailTo);
	    String ftpShare = cfg.getValue("repeats", "ftp.share");
	    message.setSubject("Repeats FTP share update done");
	    message.setContent("Done exporting repeats, export dir: " + ftpShare, "text/plain");
	    Transport.send(message);
	}

	public void wipeDir(File dir) throws FileNotFoundException {
    	File [] files= dir.listFiles();
    	for (File f:files) {
    		if ( f.isDirectory() ) {
    			deleteDir(f);
    		}
    		else {
    			f.delete();
    		}
    	}
    }
    
    public void exportAll(File dir) throws IOException, SequenceSliceException {
    	List<Species> allSpecies = spList.getAll();
    	for (Species sp:allSpecies) {
    		List<Repeat> repeats = repeatsList.getAllBySpecies(sp.getId());
    		writeToZippedFile(repeats, dir, sp.toString("-") + ".gff3", "gff3");
    		writeToZippedFile(repeats, dir, sp.toString("-") + "-AGIannot.gff3", "gff3plus");
    		writeToZippedFile(repeats, dir, sp.toString("-") + ".fa", "fasta");
    	}
    }
    
    
    private void exportAllByClassification(File ftpDir) throws IOException, SequenceSliceException {
    	List<Species> allSpecies = spList.getAll();
    	for (Species sp:allSpecies) {
			for (RepeatsOrder ord:RepeatsOrder.values()) {
				List<Repeat> repeatsByOrder= new LinkedList<Repeat>();
				String filename = sp.toString("-") + "-" + ord.getLabel();
	    		for ( Chromosome c:sp.getChromosomes() ) {
    				if ( ! ord.equals(RepeatsOrder.ANY)) {
	    				List<Repeat> repeats = repeatsList.getAllByChromosome(c.getId(), ord);
	    				repeatsByOrder.addAll(repeats);
    				}
    			}
	    		writeToZippedFile(repeatsByOrder, ftpDir, filename + ".gff3", "gff3");
	    		writeToZippedFile(repeatsByOrder, ftpDir, filename + "-AGIannot.gff3", "gff3plus");
	    		writeToZippedFile(repeatsByOrder, ftpDir, filename + ".fa", "fasta");
    		}
    	}
	}
    
    private void writeToZippedFile(List<Repeat> repeats, File dir, 
    		String unzippedFileName, String type) throws IOException, SequenceSliceException {
    	if ( repeats != null && repeats.size() > 0 ) {
                FileOutputStream file = 
            	new FileOutputStream(dir + File.separator + unzippedFileName + ".zip");
    		ZipOutputStream zipped = 
    			new ZipOutputStream(new BufferedOutputStream(file));
    		zipped.putNextEntry(new ZipEntry(unzippedFileName));
    		BufferedWriter out = new BufferedWriter(new OutputStreamWriter(zipped));
    		for (Repeat r:repeats) {
    			if ( type.equals("gff3")) {
    				out.write(r.toGff3Line() + "\n");
    			}
    			else if ( type.equals("gff3plus") ) {
    				out.write(r.toGff3Line() + r.extraAnnot() + "\n");
    			}
    			else if ( type.equals("fasta") ) {
    				out.write(r.getFastaId() + "\n");
	    			if ( r.getStrandness().equals("+")) {
	    				out.write( r.getSequence().getSlice(r.getX(), r.getY()) );
	    			}
	    			else {
	    				out.write(r.getSequence().getComplementSlice(r.getX(), r.getY()));
	    			}
	    			out.write("\n");
    			}
    		}
    		out.close();
    	}
    }

	private void deleteDir(File f) throws FileNotFoundException {
		if (f.isDirectory()) {
			for (File c : f.listFiles())
				deleteDir(c);
		}
		if (!f.delete())
			throw new FileNotFoundException("Failed to delete file: " + f);
	}


}
